@page "/categories/{id:int}"
@using MindNote.Frontend.Client.Shared
@using System.Linq
@using MindNote.Frontend.SDK.API.Models
@inject ICategoriesClient CategoryClient
@inject INotesClient NoteClient
@inject IUriHelper UriHelper

@if (Current == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (Current.Data == null)
    {
        <p><em>Not found.</em></p>
    }
    else
    {
        <div class="d-flex flex-row">
            <h1>
                <CategoryDisplay value="@Current.Data" />
            </h1>
            @if (Current.Data.User != null && Current.Data.User.Id == CurrentUserId)
            {
                <div class="d-flex flex-row-reverse flex-grow-1 align-items-center">
                    <button class="btn btn-outline-danger m-1" @onclick="@(async e => await OnDelete())"><i class="fa fa-trash"></i></button>
                    <a href="categories/@Id/edit" class="btn btn-outline-primary m-1"><i class="fa fa-edit"></i></a>
                </div>
            }
        </div>

        @if (Current.Data.User != null)
        {
            <div>
                <small>
                    <a href="users/@Current.Data.User.Id" style="color: #555;">
                        <UserDisplay Value="@Current.Data.User" />
                    </a>
                </small>
            </div>
        }
    }
}

@if (Notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PagingWaterfall Data="@Notes" Column="1" OnUpdatePage="@OnUpdateNotePage" OnNextPage="@OnNextNotePage" OnPreviousPage="@OnPreviousNotePage">
        <ItemTemplate>
            <NoteItemCard Data="@context" OnDelete="@OnDeleteNote"></NoteItemCard>
        </ItemTemplate>
    </PagingWaterfall>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    private int Id { get; set; }

    string CurrentUserId { get; set; }

    CategoryViewModel Current { get; set; }

    const int Count = 4;

    PagingEnumerable<Note> Notes { get; set; }

    protected override async Task OnInitAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            CurrentUserId = UserHelper.GetId(user);
        }

        Current = new CategoryViewModel { Data = await CategoryClient.Get(Id) };
        if (Current != null)
            Notes = await NoteClient.Query(categoryId: Id, first: Count);
    }

    private async Task OnDelete()
    {
        await CategoryClient.Delete(Id);
        UriHelper.NavigateTo("categories");
    }

    private async Task OnDeleteNote(Note data)
    {
        await NoteClient.Delete(data.Id);
        await OnUpdateNotePage();
    }

    private async Task OnUpdateNotePage()
    {
        Notes = await NoteClient.Query(categoryId: Id, after: Notes.PageInfo.StartCursor, first: Count);
    }

    private async Task OnPreviousNotePage()
    {
        Notes = await NoteClient.Query(categoryId: Id, before: Notes.PageInfo.StartCursor, last: Count);
    }

    private async Task OnNextNotePage()
    {
        Notes = await NoteClient.Query(categoryId: Id, after: Notes.PageInfo.EndCursor, first: Count);
    }
}
