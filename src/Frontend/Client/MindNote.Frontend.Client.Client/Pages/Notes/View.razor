@page "/notes/{id:int}"
@using MindNote.Frontend.Client.Shared
@inject NotesClient NoteClient
@inject IUriHelper UriHelper

@if (Current == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (Current.Data == null)
    {
        <p><em>Not found.</em></p>
    }
    else
    {
        <div class="d-flex flex-row">
            <h1 class="display-4">@Current.Data.Title</h1>
            <AuthorizeView>
                @if (Current.Data.User != null && Current.Data.User.Id == UserHelper.GetId(context.User))
                {
                    <div class="d-flex flex-row-reverse flex-grow-1 align-items-center">
                        <button class="btn btn-outline-danger m-1" @onclick="@(async e => await OnDelete())"><i class="fa fa-trash"></i></button>
                        <a href="notes/@Id/edit" class="btn btn-outline-primary m-1"><i class="fa fa-edit"></i></a>
                    </div>
                }
            </AuthorizeView>
        </div>
        <div class="mb-4">
            <NoteMetadataDisplay Value="@Current" />
        </div>
        <MarkdownViewer Value="@Current.Data.Content" />
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    private int Id { get; set; }

    NoteViewModel Current { get; set; }

    protected override async Task OnInitAsync()
    {
        Current = new NoteViewModel { Data = await NoteClient.Get(Id) };
    }

    private async Task OnDelete()
    {
        await NoteClient.Delete(Id);
        UriHelper.NavigateTo("notes");
    }
}
