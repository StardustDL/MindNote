@page "/notes"
@using MindNote.Frontend.Client.Shared
@using System.Linq
@using MindNote.Frontend.SDK.API.Models
@inject INotesClient NoteClient

<div class="d-flex flex-row">
    <h1>Notes</h1>
    <AuthorizeView>
        <div class="d-flex flex-row-reverse flex-grow-1 align-items-center">
            <a href="notes/new" class="btn btn-success"><i class="fa fa-plus"></i></a>
        </div>
    </AuthorizeView>
</div>

@if (Data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PagingWaterfall Data="@Data" Column="1" OnUpdatePage="@OnUpdatePage" OnNextPage="@OnNextPage" OnPreviousPage="@OnPreviousPage">
        <ItemTemplate>
            <NoteItemCard Data="@context" OnDelete="@OnDelete"></NoteItemCard>
        </ItemTemplate>
    </PagingWaterfall>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    const int Count = 4;

    PagingEnumerable<Note> Data { get; set; }

    protected override async Task OnInitAsync()
    {
        Data = await NoteClient.Query(first: Count);
    }

    private async Task OnDelete(Note data)
    {
        await NoteClient.Delete(data.Id);
        await OnUpdatePage();
    }

    private async Task OnUpdatePage()
    {
        Data = await NoteClient.Query(after: Data.PageInfo.StartCursor, first: Count);
    }

    private async Task OnPreviousPage()
    {
        Data = await NoteClient.Query(before: Data.PageInfo.StartCursor, last: Count);
    }

    private async Task OnNextPage()
    {
        Data = await NoteClient.Query(after: Data.PageInfo.EndCursor, first: Count);
    }
}
