@page "/users"
@page "/users/{id}"

@using MindNote.Frontend.SDK.API.Models
@using System.Linq
@inject IUsersClient UserClient
@inject INotesClient NoteClient
@inject IUriHelper UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Current == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="media">
        <Gravatar Class="rounded" Value="@Current.Email" Size="200" />
        <div class="media-body ml-4">
            <div class="d-flex flex-row">
                <h3>@Current.Name</h3>
                <AuthorizeView>
                    <div class="d-flex flex-row-reverse flex-grow-1 align-items-center">
                        <a href="account/logout" class="btn btn-outline-danger"><i class="fa fa-sign-out-alt"></i></a>
                        <a href="account/manage" class="btn btn-outline-primary"><i class="fa fa-edit"></i></a>
                    </div>
                </AuthorizeView>
            </div>
            <h5 class="text-muted">@Current.Email</h5>
            @if (!String.IsNullOrEmpty(Current.Bio))
            {
                <span class="mt-2">@(Current.Bio ?? "Bio")</span>
            }
            <dl class="mt-2">
                @if (Current.Location != null)
                {
                    <dt style="float:left; min-width:24px"><i class="fa fa-map-marker"></i></dt>
                    <dd>@Current.Location</dd>
                }
                @if (Current.Url != null)
                {
                    <dt style="float:left; min-width:24px"><i class="fa fa-link"></i></dt>
                    <dd><a href="@Current.Url" target="_blank">@Current.Url</a></dd>
                }
            </dl>
        </div>
    </div>
}

@if (Notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PagingWaterfall Data="@Notes" Column="1" OnUpdatePage="@OnUpdateNotePage" OnNextPage="@OnNextNotePage" OnPreviousPage="@OnPreviousNotePage">
        <ItemTemplate>
            <div class="card border-0">
                <div class="card-body">
                    <div class="card-title d-flex flex-row mb-1">
                        <h4>
                            <a href="users/@Id/@context.Title" style="color:black">@context.Title</a>
                        </h4>
                    </div>
                    <div class="card-subtitle mb-2">
                        <NoteMetadataDisplay Value="@context" />
                    </div>
                    <p class="card-text mb-1">
                        <TextClipper value="@context.Content" />
                    </p>
                </div>
            </div>
        </ItemTemplate>
    </PagingWaterfall>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    private string Id { get; set; } = null;

    User Current { get; set; }

    const int Count = 4;

    PagingEnumerable<Note> Notes { get; set; }

    public void Logout()
    {
        var auth = (AuthStateProvider)AuthenticationStateProvider;
        auth.Logout();
        UriHelper.NavigateTo("/");
    }

    protected override async Task OnInitAsync()
    {
        var user = (await authenticationStateTask).User;

        if (Id == null)
        {
            if (!user.Identity.IsAuthenticated)
            {
                UriHelper.NavigateTo("account/login");
                return;
            }
            Id = UserHelper.GetId(user);
            UriHelper.NavigateTo($"users/{Id}");
        }

        UserLayout.CurrentUserId = Id;

        Current = await UserClient.Get(Id);
        if (Current != null)
            Notes = await NoteClient.Query(itemClass: Data.Raws.ItemClass.Page, userId: Current.Id, first: Count);
    }

    private async Task OnUpdateNotePage()
    {
        Notes = await NoteClient.Query(itemClass: Data.Raws.ItemClass.Page, userId: Current.Id, after: Notes.PageInfo.StartCursor, first: Count);
    }

    private async Task OnPreviousNotePage()
    {
        Notes = await NoteClient.Query(itemClass: Data.Raws.ItemClass.Page, userId: Current.Id, before: Notes.PageInfo.StartCursor, last: Count);
    }

    private async Task OnNextNotePage()
    {
        Notes = await NoteClient.Query(itemClass: Data.Raws.ItemClass.Page, userId: Current.Id, after: Notes.PageInfo.EndCursor, first: Count);
    }
}
