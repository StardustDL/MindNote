@using MindNote.Frontend.SDK.API.Models
@inject INotesClient NotesClient

@if (ViewModel != null)
{
    <div class="card border-0">
        <div class="card-body">
            <div class="card-title d-flex flex-row mb-1">
                <h4>
                    <a href="notes/@ViewModel.Data.Id" style="color:black">@ViewModel.Data.Title</a>
                </h4>
                <AuthorizeView>
                    @if (ViewModel.Data.User != null && ViewModel.Data.User.Id == UserHelper.GetId(context.User))
                    {
                        <div class="d-flex flex-row-reverse flex-grow-1 align-items-center">
                            <button class="btn btn-sm btn-outline-danger m-1" @onclick="@(async e => await OnDelete.InvokeAsync(ViewModel.Data))"><i class="fa fa-trash"></i></button>
                            <a href="notes/@ViewModel.Data.Id/edit" class="btn btn-sm btn-outline-primary m-1"><i class="fa fa-edit"></i></a>
                        </div>
                    }
                </AuthorizeView>
            </div>

            <div class="card-subtitle mb-2">
                <NoteMetadataDisplay Value="@ViewModel.Data" />
            </div>

            <p class="card-text mb-1">
                <TextClipper value="@ViewModel.Data.Content" />
            </p>
            <a href="notes/@ViewModel.Data.Id" class="card-link" style="color: #555; border-bottom: 1px solid #666;">Read more</a>
        </div>
    </div>
}

@code {
    NoteViewModel ViewModel = null;

    [Parameter]
    private Note Data { get; set; }

    [Parameter]
    private EventCallback<Note> OnDelete { get; set; }

    protected override void OnParametersSet()
    {
        ViewModel = new NoteViewModel { Data = Data };
    }
}