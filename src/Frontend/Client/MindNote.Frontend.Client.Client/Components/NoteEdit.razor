<EditForm Model="@Model" OnValidSubmit="@(async e => { Model.Content = ContentEditor.GetValue(); await OnSubmit.InvokeAsync(null); })">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="input-group mt-2">
        <button type="submit" class="btn btn-primary form-control">Submit</button>
    </div>

    <div class="input-group mt-4">
        <div class="input-group-prepend">
            <span class="input-group-text">Title</span>
        </div>
        <InputText class="form-control" @bind-Value="@Model.Title" />
    </div>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Public?</span>
        </div>
        <InputCheckbox class="form-control" @bind-Value="@Model.IsPublic" />
    </div>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Category</span>
        </div>
        <InputSelect class="form-control" @bind-Value="@Model.CategoryId">
            <option></option>
            @foreach (var c in Categories)
            {
                <option value="@c.Id">@c.Name</option>
            }
        </InputSelect>
    </div>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Keywords</span>
        </div>
        <InputText class="form-control" @bind-Value="@Model.Keywords" />
    </div>

    <div class="mt-2 row" style="min-height:500px; background:white; overflow: auto">
        <MarkdownEditor Value="@Model.Content" @ref="ContentEditor"></MarkdownEditor>
    </div>
</EditForm>

@code {
    [Parameter]
    private EventCallback OnSubmit { get; set; }

    [Parameter]
    private NoteEditModel Model { get; set; }

    [Parameter]
    private IEnumerable<Category> Categories { get; set; }

    MarkdownEditor ContentEditor;
}
