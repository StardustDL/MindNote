@page "/account"
@page "/account/{id}"

@using MindNote.Client.Host.Shared
@using MindNote.Client.SDK.API
@using System.Linq
@inject IUsersClient UserClient
@inject INotesClient NoteClient
@inject ICategoriesClient CategoryClient
@inject IUriHelper UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Current == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="media">
        <Gravatar Class="rounded" Value="@Current.Email" Size="200" />
        <div class="media-body ml-4">
            <h3>@Current.Name</h3>
            <h5 class="text-muted">@Current.Email</h5>
            @if (!String.IsNullOrEmpty(Current.Bio))
            {
                <span class="mt-2">@(Current.Bio ?? "Bio")</span>
            }
            <dl class="mt-2">
                @if (Current.Location != null)
                {
                    <dt style="float:left; min-width:24px"><i class="fa fa-map-marker"></i></dt>
                    <dd>@Current.Location</dd>
                }
                @if (Current.Url != null)
                {
                    <dt style="float:left; min-width:24px"><i class="fa fa-link"></i></dt>
                    <dd><a href="@Current.Url">@Current.Url</a></dd>
                }
            </dl>
        </div>
    </div>
}

@if (Notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NoteListWaterfall Data="@Notes" Paging="@Paging" OnQueryPaging="@OnQueryPaging" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    private string Id { get; set; } = null;

    User Current { get; set; }

    PagingSettings Paging { get; set; } = new PagingSettings { ItemCountPerPage = 4 };

    string Token { get; set; } = null;

    IList<NoteViewModel> Notes { get; set; }

    public void Logout()
    {
        var auth = (AuthStateProvider)AuthenticationStateProvider;
        auth.Logout();
        UriHelper.NavigateTo("/");
    }

    protected override async Task OnInitAsync()
    {
        var user = (await authenticationStateTask).User;

        NoteClient.BaseUrl = Settings.ApiServerUrl;
        CategoryClient.BaseUrl = Settings.ApiServerUrl;
        UserClient.BaseUrl = Settings.ApiServerUrl;

        if (Id == null)
        {
            if (!user.Identity.IsAuthenticated)
            {
                UriHelper.NavigateTo("/account/login");
                return;
            }
            Id = UserHelper.GetId(user);
        }

        if (user.Identity.IsAuthenticated)
            Token = UserHelper.GetAccessToken(user);

        {
            Current = await UserClient.Get(Token, Id);
        }

        if (Current != null)
        {
            int count = (await NoteClient.Query(Token, userId: Current.Id, targets: MindNote.Data.Providers.Queries.NoteTargets.Count)).Count();
            Paging.MaximumIndex = (count / Paging.ItemCountPerPage) + (count % Paging.ItemCountPerPage > 0 ? 1 : 0);
            Paging.CurrentIndex = 1;
            await OnQueryPaging(Paging.CurrentIndex);
        }
    }

    private async Task OnQueryPaging(int pageIndex)
    {
        if (Current == null) return;

        Paging.CurrentIndex = pageIndex;
        int offset = (Paging.CurrentIndex - 1) * Paging.ItemCountPerPage;

        IEnumerable<Note> ms = await NoteClient.Query(Token, userId: Current.Id, offset: offset, count: Paging.ItemCountPerPage);
        var data = ms.Select(x => new NoteViewModel { Data = x }).ToList();
        foreach (var v in data)
            await v.Load(CategoryClient, UserClient, Token);
        Notes = data;
    }
}
