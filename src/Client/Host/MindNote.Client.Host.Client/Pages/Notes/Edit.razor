@page "/notes/{id:int}/edit"
@using MindNote.Client.Host.Shared
@using MindNote.Client.SDK.API
@using System.Linq
@inject INotesClient NoteClient
@inject IUsersClient UserClient
@inject ICategoriesClient CategoryClient
@inject IUriHelper UriHelper

<ul class="breadcrumb">
    <li class="breadcrumb-item"><a href="/notes">Notes</a></li>
    <li class="breadcrumb-item">
        <a href="/notes/@Id">@Id</a>
    </li>
    <li class="breadcrumb-item active">Edit</li>
</ul>

@if (Model == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NoteEdit Model="@Model" OnSubmit="@OnSubmit" Categories="@Categories" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    private int Id { get; set; }

    NoteEditModel Model { get; set; }

    IEnumerable<Category> Categories { get; set; }

    string Token { get; set; } = null;

    protected override async Task OnInitAsync()
    {
        var user = (await authenticationStateTask).User;
        if (!user.Identity.IsAuthenticated) return;

        Token = UserHelper.GetAccessToken(user);

        NoteClient.BaseUrl = Settings.ApiServerUrl;
        CategoryClient.BaseUrl = Settings.ApiServerUrl;
        UserClient.BaseUrl = Settings.ApiServerUrl;

        Note item = await NoteClient.Get(Token, Id);
        if (item.UserId != UserHelper.GetId(user)) return;
        Categories = await CategoryClient.GetAll(Token);

        Model = new NoteEditModel
        {
            Title = item.Title,
            Content = item.Content,
            CategoryId = item.CategoryId?.ToString(),
            Keywords = item.Keywords == null ? "" : string.Join(";", item.Keywords),
            IsPublic = item.Status == ItemStatus.Public,
        };
    }

    private async Task OnSubmit()
    {
        int? catId = null;
        if (int.TryParse(Model.CategoryId, out int res))
            catId = res;
        Note item = new Note
        {
            Title = Model.Title,
            Content = Model.Content,
            CategoryId = catId,
            Keywords = Model.Keywords?.Split(';'),
            Status = Model.IsPublic ? ItemStatus.Public : ItemStatus.Private,
        };
        var id = await NoteClient.Update(Token, Id, item);
        UriHelper.NavigateTo($"/notes/{id}");
    }
}
