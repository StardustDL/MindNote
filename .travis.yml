jobs:
  allow_failures:
    - os: windows
  include:
    - os: windows
      language: bash
      filter_secrets: false
      install:
        - choco install dotnetcore-sdk
        - choco install opencover.portable
        - dotnet --version
      script: 
        - dotnet restore -s https://api.nuget.org/v3/index.json
        - dotnet build
        - dotnet test
        - OpenCover.Console.exe -register:user -target:"dotnet.exe" -targetargs:"test" -output:coverage.xml -filter:"+[*]* -[*Moq]* -[xunit*]*" -oldstyle
        - curl -s https://codecov.io/bash > codecov
        - chmod +x codecov
        - ./codecov -f "coverage.xml"
    - os: linux
      dist: xenial
      language: csharp
      mono: none
      sudo: required
      install:
        - wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
        - sudo dpkg -i packages-microsoft-prod.deb
        - sudo apt-get install apt-transport-https
        - sudo apt-get update
        - sudo apt-get install dotnet-sdk-2.2
        - dotnet --version
      script:
        - dotnet build
        - dotnet test
    - stage: docker
      name: build and run images
      os: linux
      dist: xenial
      language: csharp
      mono: none
      sudo: required
      services:
        docker
      script:
        - docker-compose build
        - docker-compose up -d
        - sleep 60
        - curl http://localhost:8085
        - docker-compose stop
        - docker-compose logs
    - if: branch = master AND NOT (type = pull_request)
      name: deploy master image
      script:
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - docker-compose build
      - docker images
      - docker tag mindnote_api:latest $DOCKER_USERNAME/mindnote:api
      - docker push $DOCKER_USERNAME/mindnote:api
      - docker tag mindnote_host:latest $DOCKER_USERNAME/mindnote:host
      - docker push $DOCKER_USERNAME/mindnote:host
    - if: branch = dev AND NOT (type = pull_request)
      name: deploy dev image
      script:
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - docker-compose build
      - docker images
      - docker tag mindnote_api:latest $DOCKER_USERNAME/mindnote:dev-api
      - docker push $DOCKER_USERNAME/mindnote:dev-api
      - docker tag mindnote_host:latest $DOCKER_USERNAME/mindnote:dev-host
      - docker push $DOCKER_USERNAME/mindnote:dev-host