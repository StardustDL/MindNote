jobs:
  # allow_failures:
    # - os: windows
    # - os: osx
  include:
    - name: windows
      os: windows
      language: bash
      filter_secrets: false
      install:
        - choco install dotnetcore-sdk
        - dotnet --version
      script: 
        - dotnet restore -s https://api.nuget.org/v3/index.json
        - dotnet build
        - powershell -c "dotnet test /p:CollectCoverage=true /p:CoverletOutput=../../coverage.json /p:MergeWith=../../coverage.json /maxcpucount:1"
        - powershell -c "dotnet test ./test/Test.Data /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../coverage.xml /p:MergeWith=../../coverage.json /maxcpucount:1"
        - curl -s https://codecov.io/bash > codecov
        - chmod +x codecov
        - ./codecov -f "coverage.xml"
    - name: osx
      os: osx
      language: bash
      install:
        - brew cask install dotnet-sdk
        - dotnet --version
      script: 
        - dotnet restore -s https://api.nuget.org/v3/index.json
        - dotnet build
        - dotnet test /p:CollectCoverage=true /p:CoverletOutput=../../coverage.json /p:MergeWith=../../coverage.json /maxcpucount:1
        - dotnet test ./test/Test.Data /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../coverage.xml /p:MergeWith=../../coverage.json /maxcpucount:1
        - curl -s https://codecov.io/bash > codecov
        - chmod +x codecov
        - ./codecov -f "coverage.xml"
    - name: linux
      os: linux
      dist: xenial
      language: csharp
      mono: none
      sudo: required
      install:
        - wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
        - sudo dpkg -i packages-microsoft-prod.deb
        - sudo apt-get install apt-transport-https
        - sudo apt-get update
        - sudo apt-get install dotnet-sdk-2.2
        - dotnet --version
      script:
        - dotnet build
        - dotnet test /p:CollectCoverage=true /p:CoverletOutput=../../coverage.json /p:MergeWith=../../coverage.json /maxcpucount:1
        - dotnet test ./test/Test.Data /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../coverage.xml /p:MergeWith=../../coverage.json /maxcpucount:1
        - curl -s https://codecov.io/bash > codecov
        - chmod +x codecov
        - ./codecov -f "coverage.json"
    - name: docker
      os: linux
      dist: xenial
      language: csharp
      mono: none
      sudo: required
      services:
        docker
      script:
        - docker-compose build
        - docker tag mindnote:api $DOCKER_USERNAME/mindnote:dev-api
        - docker tag mindnote:identity $DOCKER_USERNAME/mindnote:dev-identity
        - docker tag mindnote:host $DOCKER_USERNAME/mindnote:dev-host
        - docker tag mindnote:client $DOCKER_USERNAME/mindnote:dev-client
        - sudo sh -c "echo \"\n127.0.0.1 mindnote.com\n127.0.0.1 client.mindnote.com\n127.0.0.1 api.mindnote.com\n127.0.0.1 id.mindnote.com\" >> /etc/hosts"
        - cd ./docker/deploy
        - docker-compose up -d && sleep 30
        - curl http://mindnote.com > /dev/null
        - curl http://api.mindnote.com > /dev/null
        - curl http://id.mindnote.com > /dev/null
        - curl http://client.mindnote.com > /dev/null
        - docker-compose stop && docker-compose logs -t
    - stage: deploy
      if: branch = master AND NOT (type = pull_request)
      name: master image
      script:
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - docker-compose build
      - docker images
      - docker tag mindnote:api $DOCKER_USERNAME/mindnote:api
      - docker push $DOCKER_USERNAME/mindnote:api
      - docker tag mindnote:identity $DOCKER_USERNAME/mindnote:identity
      - docker push $DOCKER_USERNAME/mindnote:identity
      - docker tag mindnote:host $DOCKER_USERNAME/mindnote:host
      - docker push $DOCKER_USERNAME/mindnote:host
      - docker tag mindnote:client $DOCKER_USERNAME/mindnote:client
      - docker push $DOCKER_USERNAME/mindnote:client
    - stage: deploy
      if: NOT (branch = master) AND NOT (type = pull_request)
      name: dev image
      script:
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - docker-compose build
      - docker images
      - docker tag mindnote:api $DOCKER_USERNAME/mindnote:dev-api
      - docker push $DOCKER_USERNAME/mindnote:dev-api
      - docker tag mindnote:identity $DOCKER_USERNAME/mindnote:dev-identity
      - docker push $DOCKER_USERNAME/mindnote:dev-identity
      - docker tag mindnote:host $DOCKER_USERNAME/mindnote:dev-host
      - docker push $DOCKER_USERNAME/mindnote:dev-host
      - docker tag mindnote:client $DOCKER_USERNAME/mindnote:dev-client
      - docker push $DOCKER_USERNAME/mindnote:dev-client